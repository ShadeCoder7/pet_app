using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using PetAdoptionAPI.Data;
using PetAdoptionAPI.Models;
using PetAdoptionAPI.Dtos;
using PetAdoptionAPI.Interfaces;

namespace PetAdoptionAPI.Services
{
    public class ShelterService : IShelterService
    {
        private readonly ApplicationDbContext _context;

        public ShelterService(ApplicationDbContext context)
        {
            _context = context;
        }

        // Get all shelters
        public async Task<List<ShelterReadDto>> GetAllSheltersAsync()
        {
            var shelters = await _context.Shelters.ToListAsync();

            var shelterDtos = shelters.Select(s => new ShelterReadDto
            {
                ShelterId = s.ShelterId,
                ShelterName = s.ShelterName,
                ShelterAddress = s.ShelterAddress,
                ShelterDescription = s.ShelterDescription,
                ShelterCapacity = s.ShelterCapacity,
                ShelterCurrentCapacity = s.ShelterCurrentCapacity,
                ShelterCurrentOccupancy = s.ShelterCurrentOccupancy,
                ShelterWebsite = s.ShelterWebsite,
                ShelterPhoneNumber = s.ShelterPhoneNumber,
                ShelterCreateDate = s.ShelterCreateDate,
                ShelterUpdateDate = s.ShelterUpdateDate,
                ShelterIsVerified = s.ShelterIsVerified,
                UserId = s.UserId
            }).ToList();

            return shelterDtos;
        }

        // Get a shelter by ID
        public async Task<ShelterReadDto> GetShelterByIdAsync(Guid shelterId)
        {
            var s = await _context.Shelters.FindAsync(shelterId);
            if (s == null) return null;

            return new ShelterReadDto
            {
                ShelterId = s.ShelterId,
                ShelterName = s.ShelterName,
                ShelterAddress = s.ShelterAddress,
                ShelterDescription = s.ShelterDescription,
                ShelterCapacity = s.ShelterCapacity,
                ShelterCurrentCapacity = s.ShelterCurrentCapacity,
                ShelterCurrentOccupancy = s.ShelterCurrentOccupancy,
                ShelterWebsite = s.ShelterWebsite,
                ShelterPhoneNumber = s.ShelterPhoneNumber,
                ShelterCreateDate = s.ShelterCreateDate,
                ShelterUpdateDate = s.ShelterUpdateDate,
                ShelterIsVerified = s.ShelterIsVerified,
                UserId = s.UserId
            };
        }

        // Get shelters by name
        public async Task<List<ShelterReadDto>> GetSheltersByNameAsync(string name)
        {
            if (string.IsNullOrWhiteSpace(name))
                return new List<ShelterReadDto>();

            // Búsqueda insensible a mayúsculas/minúsculas en PostgreSQL
            var shelters = await _context.Shelters
                .Where(s => EF.Functions.ILike(s.ShelterName, $"%{name}%"))
                .ToListAsync();

            return shelters.Select(s => new ShelterReadDto
            {
                ShelterId = s.ShelterId,
                ShelterName = s.ShelterName,
                ShelterAddress = s.ShelterAddress,
                ShelterDescription = s.ShelterDescription,
                ShelterCapacity = s.ShelterCapacity,
                ShelterCurrentCapacity = s.ShelterCurrentCapacity,
                ShelterCurrentOccupancy = s.ShelterCurrentOccupancy,
                ShelterWebsite = s.ShelterWebsite,
                ShelterPhoneNumber = s.ShelterPhoneNumber,
                ShelterCreateDate = s.ShelterCreateDate,
                ShelterUpdateDate = s.ShelterUpdateDate,
                ShelterIsVerified = s.ShelterIsVerified,
                UserId = s.UserId
            }).ToList();
        }

        // Create a new shelter
        public async Task<ShelterReadDto> CreateShelterAsync(ShelterCreateDto dto)
        {
            var shelter = new Shelter
            {
                // ShelterId is auto-generated by PostgreSQL (uuid_generate_v4()).
                ShelterName = dto.ShelterName,
                ShelterAddress = dto.ShelterAddress,
                ShelterDescription = dto.ShelterDescription,
                ShelterCapacity = dto.ShelterCapacity,
                ShelterCurrentCapacity = 0, // Default value for a new shelter
                ShelterCurrentOccupancy = 0, // Default value for a new shelter
                ShelterWebsite = dto.ShelterWebsite,
                ShelterPhoneNumber = dto.ShelterPhoneNumber,
                ShelterCreateDate = DateTime.UtcNow,
                ShelterUpdateDate = DateTime.UtcNow,
                ShelterIsVerified = false,
                UserId = dto.UserId
            };

            _context.Shelters.Add(shelter);
            await _context.SaveChangesAsync();

            return new ShelterReadDto
            {
                ShelterId = shelter.ShelterId,
                ShelterName = shelter.ShelterName,
                ShelterAddress = shelter.ShelterAddress,
                ShelterDescription = shelter.ShelterDescription,
                ShelterCapacity = shelter.ShelterCapacity,
                ShelterCurrentCapacity = shelter.ShelterCurrentCapacity,
                ShelterCurrentOccupancy = shelter.ShelterCurrentOccupancy,
                ShelterWebsite = shelter.ShelterWebsite,
                ShelterPhoneNumber = shelter.ShelterPhoneNumber,
                ShelterCreateDate = shelter.ShelterCreateDate,
                ShelterUpdateDate = shelter.ShelterUpdateDate,
                ShelterIsVerified = shelter.ShelterIsVerified,
                UserId = shelter.UserId
            };
        }

        // Update a shelter
        public async Task<bool> UpdateShelterAsync(Guid shelterId, ShelterUpdateDto dto)
        {
            var shelter = await _context.Shelters.FindAsync(shelterId);
            if (shelter == null) return false;

            if (dto.ShelterName != null) shelter.ShelterName = dto.ShelterName;
            if (dto.ShelterAddress != null) shelter.ShelterAddress = dto.ShelterAddress;
            if (dto.ShelterDescription != null) shelter.ShelterDescription = dto.ShelterDescription;
            if (dto.ShelterCapacity.HasValue) shelter.ShelterCapacity = dto.ShelterCapacity.Value;
            if (dto.ShelterWebsite != null) shelter.ShelterWebsite = dto.ShelterWebsite;
            if (dto.ShelterPhoneNumber != null) shelter.ShelterPhoneNumber = dto.ShelterPhoneNumber;
            if (dto.UserId.HasValue) shelter.UserId = dto.UserId;
            if (dto.ShelterIsVerified.HasValue) shelter.ShelterIsVerified = dto.ShelterIsVerified.Value;

            shelter.ShelterUpdateDate = DateTime.UtcNow;

            await _context.SaveChangesAsync();
            return true;
        }

        // Delete a shelter
        public async Task<bool> DeleteShelterAsync(Guid shelterId)
        {
            var shelter = await _context.Shelters.FindAsync(shelterId);
            if (shelter == null) return false;

            _context.Shelters.Remove(shelter);
            await _context.SaveChangesAsync();
            return true;
        }
    }
}
